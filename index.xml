<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bheisler.github.io</title>
    <link>https://bheisler.github.io/</link>
    <description>Recent content on bheisler.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jul 2018 18:30:00 -0600</lastBuildDate>
    
	<atom:link href="https://bheisler.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 3</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/</link>
      <pubDate>Thu, 19 Jul 2018 18:30:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/</guid>
      <description>Hello! Welcome to my third and final post on my GPU-accelerated Path Tracer in Rust. In the last post, we implemented all of the logic necessary to build a true path tracer. Problem is, even on the GPU it&amp;rsquo;s terrifically slow. This post is (mostly) about fixing that.
But first, we need to fix a bug or two, because I goofed. *sad trombone*
Step -1: Fixing Bugs /u/anderslanglands on Reddit pointed out that, since I&amp;rsquo;m using Cosine-weighted Importance Sampling, I need to do some extra math to avoid biasing the results.</description>
    </item>
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 2</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/</link>
      <pubDate>Thu, 12 Jul 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/</guid>
      <description>Hello, and welcome to part two of my series on writing a GPU-accelerated path tracer in Rust. I&amp;rsquo;d meant to have this post up sooner, but nothing ruins my productivity quite like Games Done Quick. I&amp;rsquo;m back now, though, so it&amp;rsquo;s time to turn the GPU ray-tracer from the last post into a real path tracer.
Tracing Paths As mentioned last time, Path Tracing is an extension to Ray Tracing which attempts to simulate global illumination.</description>
    </item>
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 1</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-1/</link>
      <pubDate>Thu, 21 Jun 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-1/</guid>
      <description>Well, it&amp;rsquo;s that time again. This is the start of a second series of articles on raytracing in Rust following on from my previous series. This time, I&amp;rsquo;ll be doing all of the rendering on a GPU using Accel - see my previous post on Accel. I thought this would be a good project for learning about GPU programming, see.
Second, this time I want to write a path tracer, rather than a raytracer.</description>
    </item>
    
    <item>
      <title>Running Rust on the GPU with Accel</title>
      <link>https://bheisler.github.io/post/rust-on-the-gpu-with-accel/</link>
      <pubDate>Thu, 14 Jun 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/rust-on-the-gpu-with-accel/</guid>
      <description>For the past month or so, I&amp;rsquo;ve been working on a follow-up to my series on Writing a Raytracer in Rust. This time around, I&amp;rsquo;ll be talking about writing a GPU-accelerated Path Tracer. As always, I&amp;rsquo;m writing it in Rust - including the GPU kernel code. Compiling Rust for GPUs at this point is difficult and error-prone, so I thought it would be good to start with some documentation on that aspect of the problem before diving into path tracing.</description>
    </item>
    
    <item>
      <title>JARVIS - Notes on Rust Crates From Writing an RSS Reader</title>
      <link>https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/</link>
      <pubDate>Sun, 22 Apr 2018 16:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/</guid>
      <description>Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don&amp;rsquo;t, and as my collection grew it started to become a hassle to use Firefox&amp;rsquo;s live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I&amp;rsquo;d checked2.</description>
    </item>
    
    <item>
      <title>Criterion.rs v0.2 - HTML, Throughput Measurements, API Changes</title>
      <link>https://bheisler.github.io/post/criterion-rs-0-2/</link>
      <pubDate>Mon, 05 Feb 2018 07:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/criterion-rs-0-2/</guid>
      <description>I&amp;rsquo;m pleased to announce the release of Criterion.rs v0.2, available today. Version 0.2 provides a number of new features including HTML reports and throughput measurements, fixes a handful of bugs, and adds a new, more powerful way to configure and construct your benchmarks. It also breaks backwards compatibility with the 0.1 versions in a number of small but important ways. Read on to learn more!
What is Criterion.rs? Criterion.rs is a statistics-driven benchmarking library for Rust.</description>
    </item>
    
    <item>
      <title>Benchmarking In Stable Rust With Criterion.rs</title>
      <link>https://bheisler.github.io/post/benchmarking-with-criterion-rs/</link>
      <pubDate>Fri, 12 Jan 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/benchmarking-with-criterion-rs/</guid>
      <description>When I initially announced the release of Criterion.rs, I didn&amp;rsquo;t expect that there would be so much demand for benchmarking on stable Rust. Now, I&amp;rsquo;d like to announce the release of Criterion.rs 0.1.2, which supports the stable compiler. This post is an introduction to benchmarking with Criterion.rs and a discussion of reasons why you might or might not want to do so.
What is Criterion.rs? Criterion.rs is a benchmarking library for Rust that aims to bring solid statistical confidence to benchmarking Rust code, while maintaining good ease-of-use, even for programmers without a background in statistics.</description>
    </item>
    
    <item>
      <title>Are Benchmarks From Cloud CI Services Reliable?</title>
      <link>https://bheisler.github.io/post/benchmarking-in-the-cloud/</link>
      <pubDate>Sat, 06 Jan 2018 16:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/benchmarking-in-the-cloud/</guid>
      <description>After I released the first version of Criterion.rs, (a statistics-driven benchmarking tool for Rust) I was asked about using it to detect performance regressions as part of a cloud-based continuous integration (CI) pipeline such as Travis-CI or Appveyor. That got me wondering - does it even make sense to do that?
Cloud-CI pipelines have a lot of potential to introduce noise into the benchmarking process - unpredictable load on the physical hosts of the build VM&amp;rsquo;s, or even unpredictable migrations of VMs between physical hosts.</description>
    </item>
    
    <item>
      <title>Penny&#39;s Sword - RWBY - Part 2</title>
      <link>https://bheisler.github.io/post/pennys-sword-rwby-part2/</link>
      <pubDate>Thu, 19 Oct 2017 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/pennys-sword-rwby-part2/</guid>
      <description>Salutations! Welcome to the second part of my post on my replica of Penny&amp;rsquo;s Sword from Rooster Teeth&amp;rsquo;s animated web show RWBY. If you haven&amp;rsquo;t read part 1, go ahead and check it out. When we left off, most of the parts were shaped and primed but not yet assembled. This time we&amp;rsquo;ll get into the painting, and some of it might be hard to visualize so take a look at the tournarounds if you&amp;rsquo;re not sure what I mean.</description>
    </item>
    
    <item>
      <title>Penny&#39;s Sword - RWBY - Part 1</title>
      <link>https://bheisler.github.io/post/pennys-sword-rwby-part1/</link>
      <pubDate>Sat, 14 Oct 2017 12:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/pennys-sword-rwby-part1/</guid>
      <description>In this post, I&amp;rsquo;ll show you how I built a light-up replica of Penny Polendina&amp;rsquo;s unnamed swords from Rooster Teeth&amp;rsquo;s excellent animated web show RWBY. RWBY is what originally got me into propmaking - I&amp;rsquo;ve already made Yang&amp;rsquo;s Ember Celica shotgauntlets and Adam&amp;rsquo;s Wilt &amp;amp; Blush Sword/Shotgun Combo. This is the first time I&amp;rsquo;ve documented my process, so hopefully you find it useful.
Blueprints &amp;amp; Design First, a quick overview of how I intended to do this build.</description>
    </item>
    
    <item>
      <title>Experiments In NES JIT Compilation</title>
      <link>https://bheisler.github.io/post/experiments-in-nes-jit-compilation/</link>
      <pubDate>Sun, 20 Aug 2017 11:35:37 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/experiments-in-nes-jit-compilation/</guid>
      <description>Inspired by the always-incredible work on Dolphin, I decided to write myself an NES emulator called Corrosion a couple years ago. I managed to get it working well enough to play basic games, and then put the project aside. This post is not about the emulator itself, but rather the JIT compiler I added to it last year and the upgrades to said JIT compiler I&amp;rsquo;ve made over the past few weeks.</description>
    </item>
    
    <item>
      <title>Parsing NES ROM Headers with nom</title>
      <link>https://bheisler.github.io/post/nes-rom-parser-with-nom/</link>
      <pubDate>Sun, 30 Jul 2017 02:11:19 +0000</pubDate>
      
      <guid>https://bheisler.github.io/post/nes-rom-parser-with-nom/</guid>
      <description>Long, long ago (December 2015) I wanted to learn how emulators worked, so I decided to write an NES emulator. Not only that, but I opted to write it in Rust, a language which I had never used before. A crazy idea, to be certain, but once I was done I had indeed learned a great deal about emulators, the NES, and Rust.
Anyway, I&amp;rsquo;ve been working on that project again lately, doing some maintenance work and upgrades.</description>
    </item>
    
    <item>
      <title>Calling Rust From Python</title>
      <link>https://bheisler.github.io/post/calling-rust-in-python/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/calling-rust-in-python/</guid>
      <description>Hello! This is a detailed example of exposing Rust code to other languages (in this case, Python). Most articles I&amp;rsquo;ve seen that cover this topic uses really trivial example functions, skipping over a lot of the complexity. Even the better ones out there typically don&amp;rsquo;t have a pre-existing, reasonably complex program to work with. I&amp;rsquo;m going to start with trivial functions and build my way up to being able to define a scene for my raytracer in Python using a series of calls to Rust, then render it and return the resulting image data back to Python.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 3 - Reflection and Refraction</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-3/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-3/</guid>
      <description>Hello again, and welcome to the final part of my series on writing a raytracer in Rust (Part 1, Part 2). Previously we implemented a basic raytracer which could handle diffuse shading of planes and spheres with multiple objects and multiple lights. This time, we&amp;rsquo;ll add texturing, reflection and transparent objects.
First, I&amp;rsquo;ve refactored the common parts of Sphere and Plane out to a separate structure. Since this post is all about handling more complex surface properties, we&amp;rsquo;ll need a structure to represent them and avoid duplication.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 2 - Light and Shadow</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-2/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-2/</guid>
      <description>Welcome to Part 2 of my series on writing a raytracer in Rust. If you haven&amp;rsquo;t already, you may wish to read Part 1. Previously, we implemented a basic raytracer which can render only a single sphere with no lighting. This time, we&amp;rsquo;ll add multiple objects, planes, and basic lighting.
Multiple Objects It&amp;rsquo;s pretty easy to change our scene definition to contain a Vec of spheres instead of just a single one.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 1 - First Rays</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-1/</link>
      <pubDate>Mon, 20 Feb 2017 11:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-1/</guid>
      <description>Hello! This is part one of a short series of posts on writing a simple raytracer in Rust. I&amp;rsquo;ve never written one of these before, so it should be a learning experience all around.
So what is a raytracer anyway? The short version is it&amp;rsquo;s a computer program that traces the paths of simulated rays of light through a scene to produce high-quality 3D-rendered images. Despite that, it also happens to be the simplest way to render 3D images.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://bheisler.github.io/about/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bheisler.github.io/about/about/</guid>
      <description>Hello! I&amp;rsquo;m Brook Heisler. I&amp;rsquo;m a software developer from Saskatoon. When I&amp;rsquo;m not busy programming, I spend my time propmaking instead. This is reflected in the dual nature of this blog, which is mostly about my hobby projects. Here, you&amp;rsquo;ll find detailed build logs about my prop projects and even-more-detailed information on my code projects, as well as whatever else I feel like writing about. If you&amp;rsquo;re only interested in one of those two things, that&amp;rsquo;s cool - use the category links above to focus on only code or only props.</description>
    </item>
    
  </channel>
</rss>