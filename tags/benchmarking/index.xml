<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benchmarking on bheisler.github.io</title>
    <link>https://bheisler.github.io/tags/benchmarking/</link>
    <description>Recent content in Benchmarking on bheisler.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Feb 2018 07:00:00 -0600</lastBuildDate>
    
	<atom:link href="https://bheisler.github.io/tags/benchmarking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Criterion.rs v0.2 - HTML, Throughput Measurements, API Changes</title>
      <link>https://bheisler.github.io/post/criterion-rs-0-2/</link>
      <pubDate>Mon, 05 Feb 2018 07:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/criterion-rs-0-2/</guid>
      <description>I&amp;rsquo;m pleased to announce the release of Criterion.rs v0.2, available today. Version 0.2 provides a number of new features including HTML reports and throughput measurements, fixes a handful of bugs, and adds a new, more powerful way to configure and construct your benchmarks. It also breaks backwards compatibility with the 0.1 versions in a number of small but important ways. Read on to learn more!
What is Criterion.rs? Criterion.rs is a statistics-driven benchmarking library for Rust.</description>
    </item>
    
    <item>
      <title>Benchmarking In Stable Rust With Criterion.rs</title>
      <link>https://bheisler.github.io/post/benchmarking-with-criterion-rs/</link>
      <pubDate>Fri, 12 Jan 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/benchmarking-with-criterion-rs/</guid>
      <description>When I initially announced the release of Criterion.rs, I didn&amp;rsquo;t expect that there would be so much demand for benchmarking on stable Rust. Now, I&amp;rsquo;d like to announce the release of Criterion.rs 0.1.2, which supports the stable compiler. This post is an introduction to benchmarking with Criterion.rs and a discussion of reasons why you might or might not want to do so.
What is Criterion.rs? Criterion.rs is a benchmarking library for Rust that aims to bring solid statistical confidence to benchmarking Rust code, while maintaining good ease-of-use, even for programmers without a background in statistics.</description>
    </item>
    
    <item>
      <title>Are Benchmarks From Cloud CI Services Reliable?</title>
      <link>https://bheisler.github.io/post/benchmarking-in-the-cloud/</link>
      <pubDate>Sat, 06 Jan 2018 16:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/benchmarking-in-the-cloud/</guid>
      <description>After I released the first version of Criterion.rs, (a statistics-driven benchmarking tool for Rust) I was asked about using it to detect performance regressions as part of a cloud-based continuous integration (CI) pipeline such as Travis-CI or Appveyor. That got me wondering - does it even make sense to do that?
Cloud-CI pipelines have a lot of potential to introduce noise into the benchmarking process - unpredictable load on the physical hosts of the build VM&amp;rsquo;s, or even unpredictable migrations of VMs between physical hosts.</description>
    </item>
    
  </channel>
</rss>