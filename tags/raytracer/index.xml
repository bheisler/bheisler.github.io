<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raytracer on bheisler.github.io</title>
    <link>https://bheisler.github.io/tags/raytracer/</link>
    <description>Recent content in Raytracer on bheisler.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jul 2018 18:30:00 -0600</lastBuildDate>
    
	<atom:link href="https://bheisler.github.io/tags/raytracer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 3</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/</link>
      <pubDate>Thu, 19 Jul 2018 18:30:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/</guid>
      <description>Hello! Welcome to my third and final post on my GPU-accelerated Path Tracer in Rust. In the last post, we implemented all of the logic necessary to build a true path tracer. Problem is, even on the GPU it&amp;rsquo;s terrifically slow. This post is (mostly) about fixing that.
But first, we need to fix a bug or two, because I goofed. *sad trombone*
Step -1: Fixing Bugs /u/anderslanglands on Reddit pointed out that, since I&amp;rsquo;m using Cosine-weighted Importance Sampling, I need to do some extra math to avoid biasing the results.</description>
    </item>
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 2</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/</link>
      <pubDate>Thu, 12 Jul 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/</guid>
      <description>Hello, and welcome to part two of my series on writing a GPU-accelerated path tracer in Rust. I&amp;rsquo;d meant to have this post up sooner, but nothing ruins my productivity quite like Games Done Quick. I&amp;rsquo;m back now, though, so it&amp;rsquo;s time to turn the GPU ray-tracer from the last post into a real path tracer.
Tracing Paths As mentioned last time, Path Tracing is an extension to Ray Tracing which attempts to simulate global illumination.</description>
    </item>
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 1</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-1/</link>
      <pubDate>Thu, 21 Jun 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-1/</guid>
      <description>Well, it&amp;rsquo;s that time again. This is the start of a second series of articles on raytracing in Rust following on from my previous series. This time, I&amp;rsquo;ll be doing all of the rendering on a GPU using Accel - see my previous post on Accel. I thought this would be a good project for learning about GPU programming, see.
Second, this time I want to write a path tracer, rather than a raytracer.</description>
    </item>
    
    <item>
      <title>Calling Rust From Python</title>
      <link>https://bheisler.github.io/post/calling-rust-in-python/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/calling-rust-in-python/</guid>
      <description>Hello! This is a detailed example of exposing Rust code to other languages (in this case, Python). Most articles I&amp;rsquo;ve seen that cover this topic uses really trivial example functions, skipping over a lot of the complexity. Even the better ones out there typically don&amp;rsquo;t have a pre-existing, reasonably complex program to work with. I&amp;rsquo;m going to start with trivial functions and build my way up to being able to define a scene for my raytracer in Python using a series of calls to Rust, then render it and return the resulting image data back to Python.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 3 - Reflection and Refraction</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-3/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-3/</guid>
      <description>Hello again, and welcome to the final part of my series on writing a raytracer in Rust (Part 1, Part 2). Previously we implemented a basic raytracer which could handle diffuse shading of planes and spheres with multiple objects and multiple lights. This time, we&amp;rsquo;ll add texturing, reflection and transparent objects.
First, I&amp;rsquo;ve refactored the common parts of Sphere and Plane out to a separate structure. Since this post is all about handling more complex surface properties, we&amp;rsquo;ll need a structure to represent them and avoid duplication.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 2 - Light and Shadow</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-2/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-2/</guid>
      <description>Welcome to Part 2 of my series on writing a raytracer in Rust. If you haven&amp;rsquo;t already, you may wish to read Part 1. Previously, we implemented a basic raytracer which can render only a single sphere with no lighting. This time, we&amp;rsquo;ll add multiple objects, planes, and basic lighting.
Multiple Objects It&amp;rsquo;s pretty easy to change our scene definition to contain a Vec of spheres instead of just a single one.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 1 - First Rays</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-1/</link>
      <pubDate>Mon, 20 Feb 2017 11:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-1/</guid>
      <description>Hello! This is part one of a short series of posts on writing a simple raytracer in Rust. I&amp;rsquo;ve never written one of these before, so it should be a learning experience all around.
So what is a raytracer anyway? The short version is it&amp;rsquo;s a computer program that traces the paths of simulated rays of light through a scene to produce high-quality 3D-rendered images. Despite that, it also happens to be the simplest way to render 3D images.</description>
    </item>
    
  </channel>
</rss>