<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on bheisler.github.io</title>
    <link>https://bheisler.github.io/tags/rust/</link>
    <description>Recent content in Rust on bheisler.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Oct 2020 13:00:00 -0600</lastBuildDate>
    
	<atom:link href="https://bheisler.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a Recipe Manager - Part 1</title>
      <link>https://bheisler.github.io/post/recipe-manager-part-1/</link>
      <pubDate>Sun, 04 Oct 2020 13:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/recipe-manager-part-1/</guid>
      <description>Something you might not know about me is that I&amp;rsquo;m an avid home cook. As such, I like to experiment in the kitchen, improvise new recipes, and modify existing ones. I also track my calorie and macronutrient intake. I have software tools for this, but I don&amp;rsquo;t like them and eventually I got fed up and decided to write my own.
I also thought it would be interesting to try working with the garage door up and writing more publicly about what I&amp;rsquo;m working on, so this is part one of an ongoing series where I do just that.</description>
    </item>
    
    <item>
      <title>Efficient Use of Travis-CI&#39;s Cache For Rust Builds</title>
      <link>https://bheisler.github.io/post/efficient-use-of-travis-ci-cache-for-rust/</link>
      <pubDate>Mon, 03 Aug 2020 18:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/efficient-use-of-travis-ci-cache-for-rust/</guid>
      <description>A while ago, I complained on Reddit about the Travis-CI build times for my Rust crates. Aleksey Kladov, better known in the Rust community as &amp;ldquo;matklad&amp;rdquo;, responded to mention that Travis-CI&amp;rsquo;s caching behavior is&amp;hellip; suboptimal for Rust crates and gave me a way to fix it.
I figure there are probably other Rust developers out there who aren&amp;rsquo;t aware of this, so I&amp;rsquo;m writing a short post to explain it.</description>
    </item>
    
    <item>
      <title>Criterion.rs v0.3 - Custom Measurements, Profiling Hooks, Custom Test Framework, API Changes</title>
      <link>https://bheisler.github.io/post/criterion-rs-0-3/</link>
      <pubDate>Sun, 25 Aug 2019 10:30:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/criterion-rs-0-3/</guid>
      <description>I&amp;rsquo;m pleased to announce the release of Criterion.rs v0.3, available today. Version 0.3 provides a number of new features including preliminary support for plugging in custom measurements (eg. hardware timers or POSIX CPU time), hooks to start/stop profilers, a new BenchmarkGroup struct that provides more flexibility than the older Benchmark and ParameterizedBenchmark structs, and an implementation of a #[criterion] custom-test-framework macro for those on Nightly.
What is Criterion.rs? Criterion.rs is a statistics-driven benchmarking library for Rust.</description>
    </item>
    
    <item>
      <title>Announcing RustaCUDA v0.1.0</title>
      <link>https://bheisler.github.io/post/announcing-rustacuda/</link>
      <pubDate>Sat, 01 Dec 2018 15:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/announcing-rustacuda/</guid>
      <description>In my post on GPGPU in Rust, I declared that I intended to work on improving the state of CUDA support in Rust. Since then, I&amp;rsquo;ve been mostly radio-silent. I&amp;rsquo;m pleased to announce that I have actually been working on something, and I&amp;rsquo;ve finally published that something.
RustaCUDA RustaCUDA is a new wrapper crate for the CUDA driver API. It allows the programmer to allocate and free GPU memory, copy data to and from the GPU, load CUDA modules and launch kernels, all with a mostly-safe, programmer-friendly, Rust-y interface.</description>
    </item>
    
    <item>
      <title>Porting My CUDA Path Tracer to ptx-builder/linker</title>
      <link>https://bheisler.github.io/post/ptx-builder-and-linker/</link>
      <pubDate>Mon, 01 Oct 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/ptx-builder-and-linker/</guid>
      <description>A bunch of stuff has happened since I published my post on The State of GPGPU in Rust. Most importantly, Denys Zariaiev (@denzp) released his work on a custom linker for Rust CUDA kernels, and a build.rs helper crate to make it easier to use.
These two crates eliminate many of the problems I referred to in my previous post. The linker solves most of the &amp;ldquo;invalid PTX file&amp;rdquo; problems, while the ptx-builder crate does all of the magic that Accel was doing behind the scenes.</description>
    </item>
    
    <item>
      <title>The State of GPGPU in Rust</title>
      <link>https://bheisler.github.io/post/state-of-gpgpu-in-rust/</link>
      <pubDate>Wed, 08 Aug 2018 20:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/state-of-gpgpu-in-rust/</guid>
      <description>At work a few months ago, we started experimenting with GPU-acceleration. My boss asked if I was interested. I didn&amp;rsquo;t know anything about programming GPUs, so of course I said &amp;ldquo;Heck yes, I&amp;rsquo;m interested!&amp;ldquo;. I needed to learn about GPUs in a hurry, and that led to my GPU Path Tracer series. That was a lot of fun, but it showed me that CUDA support in Rust is pretty poor.</description>
    </item>
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 3</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/</link>
      <pubDate>Thu, 19 Jul 2018 18:30:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/</guid>
      <description>Hello! Welcome to my third and final post on my GPU-accelerated Path Tracer in Rust. In the last post, we implemented all of the logic necessary to build a true path tracer. Problem is, even on the GPU it&amp;rsquo;s terrifically slow. This post is (mostly) about fixing that.
But first, we need to fix a bug or two, because I goofed. *sad trombone*
Step -1: Fixing Bugs /u/anderslanglands on Reddit pointed out that, since I&amp;rsquo;m using Cosine-weighted Importance Sampling, I need to do some extra math to avoid biasing the results.</description>
    </item>
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 2</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/</link>
      <pubDate>Thu, 12 Jul 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/</guid>
      <description>Hello, and welcome to part two of my series on writing a GPU-accelerated path tracer in Rust. I&amp;rsquo;d meant to have this post up sooner, but nothing ruins my productivity quite like Games Done Quick. I&amp;rsquo;m back now, though, so it&amp;rsquo;s time to turn the GPU ray-tracer from the last post into a real path tracer.
Tracing Paths As mentioned last time, Path Tracing is an extension to Ray Tracing which attempts to simulate global illumination.</description>
    </item>
    
    <item>
      <title>Writing a GPU-Accelerated Path Tracer in Rust - Part 1</title>
      <link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-1/</link>
      <pubDate>Thu, 21 Jun 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-1/</guid>
      <description>Well, it&amp;rsquo;s that time again. This is the start of a second series of articles on raytracing in Rust following on from my previous series. This time, I&amp;rsquo;ll be doing all of the rendering on a GPU using Accel - see my previous post on Accel. I thought this would be a good project for learning about GPU programming, see.
Second, this time I want to write a path tracer, rather than a raytracer.</description>
    </item>
    
    <item>
      <title>Running Rust on the GPU with Accel</title>
      <link>https://bheisler.github.io/post/rust-on-the-gpu-with-accel/</link>
      <pubDate>Thu, 14 Jun 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/rust-on-the-gpu-with-accel/</guid>
      <description>NOTE: Much of what I discuss below is no longer accurate.
For the past month or so, I&amp;rsquo;ve been working on a follow-up to my series on Writing a Raytracer in Rust. This time around, I&amp;rsquo;ll be talking about writing a GPU-accelerated Path Tracer. As always, I&amp;rsquo;m writing it in Rust - including the GPU kernel code. Compiling Rust for GPUs at this point is difficult and error-prone, so I thought it would be good to start with some documentation on that aspect of the problem before diving into path tracing.</description>
    </item>
    
    <item>
      <title>JARVIS - Notes on Rust Crates From Writing an RSS Reader</title>
      <link>https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/</link>
      <pubDate>Sun, 22 Apr 2018 16:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/</guid>
      <description>Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don&amp;rsquo;t, and as my collection grew it started to become a hassle to use Firefox&amp;rsquo;s live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I&amp;rsquo;d checked2.</description>
    </item>
    
    <item>
      <title>Criterion.rs v0.2 - HTML, Throughput Measurements, API Changes</title>
      <link>https://bheisler.github.io/post/criterion-rs-0-2/</link>
      <pubDate>Mon, 05 Feb 2018 07:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/criterion-rs-0-2/</guid>
      <description>I&amp;rsquo;m pleased to announce the release of Criterion.rs v0.2, available today. Version 0.2 provides a number of new features including HTML reports and throughput measurements, fixes a handful of bugs, and adds a new, more powerful way to configure and construct your benchmarks. It also breaks backwards compatibility with the 0.1 versions in a number of small but important ways. Read on to learn more!
What is Criterion.rs? Criterion.rs is a statistics-driven benchmarking library for Rust.</description>
    </item>
    
    <item>
      <title>Benchmarking In Stable Rust With Criterion.rs</title>
      <link>https://bheisler.github.io/post/benchmarking-with-criterion-rs/</link>
      <pubDate>Fri, 12 Jan 2018 19:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/benchmarking-with-criterion-rs/</guid>
      <description>When I initially announced the release of Criterion.rs, I didn&amp;rsquo;t expect that there would be so much demand for benchmarking on stable Rust. Now, I&amp;rsquo;d like to announce the release of Criterion.rs 0.1.2, which supports the stable compiler. This post is an introduction to benchmarking with Criterion.rs and a discussion of reasons why you might or might not want to do so.
What is Criterion.rs? Criterion.rs is a benchmarking library for Rust that aims to bring solid statistical confidence to benchmarking Rust code, while maintaining good ease-of-use, even for programmers without a background in statistics.</description>
    </item>
    
    <item>
      <title>Are Benchmarks From Cloud CI Services Reliable?</title>
      <link>https://bheisler.github.io/post/benchmarking-in-the-cloud/</link>
      <pubDate>Sat, 06 Jan 2018 16:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/benchmarking-in-the-cloud/</guid>
      <description>After I released the first version of Criterion.rs, (a statistics-driven benchmarking tool for Rust) I was asked about using it to detect performance regressions as part of a cloud-based continuous integration (CI) pipeline such as Travis-CI or Appveyor. That got me wondering - does it even make sense to do that?
Cloud-CI pipelines have a lot of potential to introduce noise into the benchmarking process - unpredictable load on the physical hosts of the build VM&amp;rsquo;s, or even unpredictable migrations of VMs between physical hosts.</description>
    </item>
    
    <item>
      <title>Experiments In NES JIT Compilation</title>
      <link>https://bheisler.github.io/post/experiments-in-nes-jit-compilation/</link>
      <pubDate>Sun, 20 Aug 2017 11:35:37 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/experiments-in-nes-jit-compilation/</guid>
      <description>Inspired by the always-incredible work on Dolphin, I decided to write myself an NES emulator called Corrosion a couple years ago. I managed to get it working well enough to play basic games, and then put the project aside. This post is not about the emulator itself, but rather the JIT compiler I added to it last year and the upgrades to said JIT compiler I&amp;rsquo;ve made over the past few weeks.</description>
    </item>
    
    <item>
      <title>Parsing NES ROM Headers with nom</title>
      <link>https://bheisler.github.io/post/nes-rom-parser-with-nom/</link>
      <pubDate>Sun, 30 Jul 2017 02:11:19 +0000</pubDate>
      
      <guid>https://bheisler.github.io/post/nes-rom-parser-with-nom/</guid>
      <description>Long, long ago (December 2015) I wanted to learn how emulators worked, so I decided to write an NES emulator. Not only that, but I opted to write it in Rust, a language which I had never used before. A crazy idea, to be certain, but once I was done I had indeed learned a great deal about emulators, the NES, and Rust.
Anyway, I&amp;rsquo;ve been working on that project again lately, doing some maintenance work and upgrades.</description>
    </item>
    
    <item>
      <title>Calling Rust From Python</title>
      <link>https://bheisler.github.io/post/calling-rust-in-python/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/calling-rust-in-python/</guid>
      <description>Hello! This is a detailed example of exposing Rust code to other languages (in this case, Python). Most articles I&amp;rsquo;ve seen that cover this topic uses really trivial example functions, skipping over a lot of the complexity. Even the better ones out there typically don&amp;rsquo;t have a pre-existing, reasonably complex program to work with. I&amp;rsquo;m going to start with trivial functions and build my way up to being able to define a scene for my raytracer in Python using a series of calls to Rust, then render it and return the resulting image data back to Python.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 3 - Reflection and Refraction</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-3/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-3/</guid>
      <description>Hello again, and welcome to the final part of my series on writing a raytracer in Rust (Part 1, Part 2). Previously we implemented a basic raytracer which could handle diffuse shading of planes and spheres with multiple objects and multiple lights. This time, we&amp;rsquo;ll add texturing, reflection and transparent objects.
First, I&amp;rsquo;ve refactored the common parts of Sphere and Plane out to a separate structure. Since this post is all about handling more complex surface properties, we&amp;rsquo;ll need a structure to represent them and avoid duplication.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 2 - Light and Shadow</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-2/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-2/</guid>
      <description>Welcome to Part 2 of my series on writing a raytracer in Rust. If you haven&amp;rsquo;t already, you may wish to read Part 1. Previously, we implemented a basic raytracer which can render only a single sphere with no lighting. This time, we&amp;rsquo;ll add multiple objects, planes, and basic lighting.
Multiple Objects It&amp;rsquo;s pretty easy to change our scene definition to contain a Vec of spheres instead of just a single one.</description>
    </item>
    
    <item>
      <title>Writing a Raytracer in Rust - Part 1 - First Rays</title>
      <link>https://bheisler.github.io/post/writing-raytracer-in-rust-part-1/</link>
      <pubDate>Mon, 20 Feb 2017 11:00:00 -0600</pubDate>
      
      <guid>https://bheisler.github.io/post/writing-raytracer-in-rust-part-1/</guid>
      <description>Hello! This is part one of a short series of posts on writing a simple raytracer in Rust. I&amp;rsquo;ve never written one of these before, so it should be a learning experience all around.
So what is a raytracer anyway? The short version is it&amp;rsquo;s a computer program that traces the paths of simulated rays of light through a scene to produce high-quality 3D-rendered images. Despite that, it also happens to be the simplest way to render 3D images.</description>
    </item>
    
  </channel>
</rss>